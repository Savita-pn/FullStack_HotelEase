{"ast":null,"code":"var _jsxFileName = \"E:\\\\HE\\\\HotelEase\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchProfile(token);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchProfile = async token => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        localStorage.removeItem('token');\n      }\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    const response = await fetch('http://localhost:5001/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n  };\n  const register = async (name, email, password, role) => {\n    const response = await fetch('http://localhost:5001/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password,\n        role\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","fetchProfile","response","fetch","headers","ok","data","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","message","setItem","register","name","role","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/HE/HotelEase/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'customer' | 'manager' | 'admin';\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string, role: string) => Promise<void>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchProfile(token);\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchProfile = async (token: string) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/auth/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        localStorage.removeItem('token');\n      }\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    const response = await fetch('http://localhost:5001/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n  };\n\n  const register = async (name: string, email: string, password: string, role: string) => {\n    const response = await fetch('http://localhost:5001/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, email, password, role }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || 'Registration failed');\n    }\n\n    localStorage.setItem('token', data.token);\n    setUser(data.user);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}