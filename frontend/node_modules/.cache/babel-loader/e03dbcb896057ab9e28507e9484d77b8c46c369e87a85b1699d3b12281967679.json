{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nexport const useGoogleLogin = () => {\n  _s();\n  const handleGoogleLogin = useCallback(async (onSuccess, onError) => {\n    if (!window.google) {\n      onError('Google Sign-In not loaded');\n      return;\n    }\n    window.google.accounts.id.initialize({\n      client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your_google_client_id_here',\n      callback: async response => {\n        try {\n          const res = await fetch('http://localhost:5001/api/auth/google-auth', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              credential: response.credential\n            })\n          });\n          const data = await res.json();\n          if (data.success) {\n            onSuccess(data.token);\n          } else {\n            onError(data.message || 'Google login failed');\n          }\n        } catch (error) {\n          onError('Network error during Google login');\n        }\n      }\n    });\n    window.google.accounts.id.prompt();\n  }, []);\n  const renderGoogleButton = useCallback(elementId => {\n    if (window.google) {\n      window.google.accounts.id.renderButton(document.getElementById(elementId), {\n        theme: 'outline',\n        size: 'large',\n        width: '100%'\n      });\n    }\n  }, []);\n  return {\n    handleGoogleLogin,\n    renderGoogleButton\n  };\n};\n_s(useGoogleLogin, \"IujNR+l3nEWizR6JkPGPQQm0bvk=\");","map":{"version":3,"names":["useCallback","useGoogleLogin","_s","handleGoogleLogin","onSuccess","onError","window","google","accounts","id","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","response","res","fetch","method","headers","body","JSON","stringify","credential","data","json","success","token","message","error","prompt","renderGoogleButton","elementId","renderButton","document","getElementById","theme","size","width"],"sources":["E:/HotelEase/frontend/src/utils/useGoogleLogin.ts"],"sourcesContent":["import { useCallback } from 'react';\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nexport const useGoogleLogin = () => {\n  const handleGoogleLogin = useCallback(async (onSuccess: (token: string) => void, onError: (error: string) => void) => {\n    if (!window.google) {\n      onError('Google Sign-In not loaded');\n      return;\n    }\n\n    window.google.accounts.id.initialize({\n      client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your_google_client_id_here',\n      callback: async (response: any) => {\n        try {\n          const res = await fetch('http://localhost:5001/api/auth/google-auth', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ credential: response.credential }),\n          });\n\n          const data = await res.json();\n          if (data.success) {\n            onSuccess(data.token);\n          } else {\n            onError(data.message || 'Google login failed');\n          }\n        } catch (error) {\n          onError('Network error during Google login');\n        }\n      },\n    });\n\n    window.google.accounts.id.prompt();\n  }, []);\n\n  const renderGoogleButton = useCallback((elementId: string) => {\n    if (window.google) {\n      window.google.accounts.id.renderButton(\n        document.getElementById(elementId),\n        {\n          theme: 'outline',\n          size: 'large',\n          width: '100%',\n        }\n      );\n    }\n  }, []);\n\n  return { handleGoogleLogin, renderGoogleButton };\n};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AAQnC,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,iBAAiB,GAAGH,WAAW,CAAC,OAAOI,SAAkC,EAAEC,OAAgC,KAAK;IACpH,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;MAClBF,OAAO,CAAC,2BAA2B,CAAC;MACpC;IACF;IAEAC,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;MACnCC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,IAAI,4BAA4B;MACjFC,QAAQ,EAAE,MAAOC,QAAa,IAAK;QACjC,IAAI;UACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;YACpEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEC,UAAU,EAAER,QAAQ,CAACQ;YAAW,CAAC;UAC1D,CAAC,CAAC;UAEF,MAAMC,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;UAC7B,IAAID,IAAI,CAACE,OAAO,EAAE;YAChBvB,SAAS,CAACqB,IAAI,CAACG,KAAK,CAAC;UACvB,CAAC,MAAM;YACLvB,OAAO,CAACoB,IAAI,CAACI,OAAO,IAAI,qBAAqB,CAAC;UAChD;QACF,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdzB,OAAO,CAAC,mCAAmC,CAAC;QAC9C;MACF;IACF,CAAC,CAAC;IAEFC,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACsB,MAAM,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAGhC,WAAW,CAAEiC,SAAiB,IAAK;IAC5D,IAAI3B,MAAM,CAACC,MAAM,EAAE;MACjBD,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACyB,YAAY,CACpCC,QAAQ,CAACC,cAAc,CAACH,SAAS,CAAC,EAClC;QACEI,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE;MACT,CACF,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEpC,iBAAiB;IAAE6B;EAAmB,CAAC;AAClD,CAAC;AAAC9B,EAAA,CAhDWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}